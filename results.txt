Przykład wygenerowanych rozwiązań:

Co linijkę printuje best_eval rozwiązania, powinno maleć, a rośnie, jeśli zastosuję ifa żeby zmieniało się tylko 
gdy jest mniejsze to zawsze jest wart. f. celu w pierwszej iteracji jako ostatnia i najlepsza. 
Co znaczy że w naszym algorytmie generowane osobniki mają w sobie jakąś wrodzoną wadę, czyli albo crossing albo mutacje
trzeba tworzyć jakoś inaczej, bo z każdym następnym pokoleniem jest tylko gorzej.
Ewentualnie jakieś parametry lub liczenie czasu (delayów) jest błędne.

(piotrsuchy) piotrsuchy@Piotrs-MacBook-Pro algorytm_genetyczny % python main.py
Najlepsze rozwiązanie w pierwszej iteracji: 
[[(1, 1), (2, 7), (4, 1), (6, 20), (8, 11), (9, 20), (10, 19), (11, 20), (12, 5), (13, 3), (14, 20), (15, 13), (16, 13), (17, 1), (18, 8)], [(0, 18), (1, 13), (2, 8), (3, 18), (4, 1), (7, 2), (10, 1), (12, 5), (16, 7), (17, 3), (19, 5)], [(0, 2), (1, 6), (2, 5), (3, 1), (4, 17), (5, 12), (7, 17), (8, 9), (12, 6), (13, 17), (19, 13)], [(3, 1), (4, 1), (5, 8), (7, 1), (12, 4), (15, 7), (17, 16), (18, 12), (19, 2)]]
Wartość funkcji celu w pierwszej iteracji:
19356857.14285714
12586782571.427828
25352576857.144577
38041217142.86051
50515674857.145515
63172345714.28192
75838409142.84618
88473958857.12473
101148645999.97461
113793485714.26501
126462371428.5622
139213861142.85974
152077007714.3125
165033263142.90576
177940202285.78476
190399782857.2232
201755459428.64606
214475786285.7996
227296284857.23688
239855674285.80634
252552019428.67145
265214895142.96472
277921462000.11536
290164121714.4103
304134694285.85767
316588203428.6997
329265138571.57587
340835335428.7215
352918912857.37103
365829258857.3676
378223079428.8208
391540569428.75146
402803795428.79944
415343142000.2056
427855844285.8866
440384456571.5073
452916577714.2699
465526063999.8901
478140325428.36743
490752509999.7034
503327590285.3247
515909593428.08923
528464995713.711
540989178856.47473
553518571713.5256
566041852284.8628
578530445999.0574
591048518856.1086
603568626856.0151
616050274284.4922
628488907712.9696
640937583427.1602
653380199998.4922
665790566855.5388
678213527141.1582
690627589712.4905
703059860569.5372
715489607998.0137
727923855140.7756
740331026854.9658
752706969712.0132
765100083426.2032
777479436283.2559
789868988283.254
802306393426.112
814741835711.8275
827219802854.686
839679063997.5452
852093573997.5452
864511246283.2595
876923032283.32
889334164283.4702
901736959426.4775
914152387426.6272
926564307141.0632
939009763141.2129
951432553427.0775
963839481141.513
976254361998.8059
988665440284.6694
1001088291427.6757
1013518737713.5396
1025933627142.2604
1038357338570.981
1050773517999.7015
1063192638856.9939
1075621057142.8573
1088030684285.8638
1100436802000.2986
1112839280571.8765
1125268641143.454
1137681430572.1748
1150064241715.182
1162455328858.1895
1174828856572.6255
1187206569715.6326
1199584100572.9253
1211963677715.9326
1224359752001.7974
1236728452287.6614
1249126916573.526
Najlepsze rozwiązanie: 
 [[(2, 1), (3, 10), (4, 12), (5, 14), (6, 19), (7, 1), (8, 7), (11, 1), (12, 13), (13, 13), (14, 6), (15, 19), (18, 2), (19, 16)], [(0, 3), (2, 16), (3, 7), (5, 2), (8, 9), (10, 19), (11, 6), (14, 2), (17, 8)], [(1, 20), (2, 1), (3, 3), (4, 6), (5, 2), (6, 1), (7, 18), (9, 17), (10, 1), (11, 5), (13, 7), (16, 16), (17, 9), (18, 18), (19, 4)], [(0, 17), (2, 2), (4, 2), (5, 2), (7, 1), (8, 4), (9, 3), (11, 8), (12, 7), (14, 12), (15, 1), (16, 4), (17, 3)]]
O wartości funkcji celu: 1249126916573